<?php

namespace melon\RefappBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ComposantRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ComposantRepository extends EntityRepository
{
	public function searchComposantAppli($appli){
		$qb = $this->createQueryBuilder('c')
		->innerJoin('c.applications', 'app', 'WITH', 'app=:app')
		->addSelect('app')
		->setParameter('app', $appli);
	
		return $qb->getQuery()
		->getResult();
	
	}
	
	
	public function searchServeurWeb(){
		return $this->getEntityManager()
		->createQuery('SELECT c FROM melonRefappBundle:Composant c ORDER BY c.type')
		->getResult();
	}
	

	/**
	 * Get Obsolescence
	 *
	 * @return \int
	 */
	public function getObsolescence($nbMois1,$nbMois2,$nbMois3){
	
		$today ="now"|date("Y-m-d");
		$year=$today|date('Y');
		$month=$today|date('m');
		$day=$today|date('d');
		//On créer plusieurs dates (en timestamp) pour pouvoir les comparées après
		list($year, $month, $day) = explode('-', date("Y-m-d"));
		$now = mktime(0, 0, 0, $month, $day, $year); //Maintenant
		$unMois = mktime(0, 0, 0, $month-$nbMois1, $day, $year); //Dans un moins
		$troisMois = mktime(0, 0, 0, $month-$nbMois2, $day, $year); //Dans 3 mois
		$sixMois = mktime(0, 0, 0, $month-$nbMois3, $day, $year); //Dans 6 mois
		// on envoi� � la vu les r�sultats � la vue
		if($this->getDateFin()!=""){//Si la date est renseignée
			//Transformation de la date en timestamp
			list($year, $month, $day) = explode('-', $this->getDateFin()->format("Y-m-d"));
			$dateComp = mktime(0, 0, 0, $month, $day, $year);
			if($dateComp < $sixMois){ //Si dans moins de 6
				return 6;
			}elseif($dateComp < $troisMois){ //Si dans moins de 3
				return 3;
			}elseif($dateComp < $unMois){ //Si obsolescene dans moins d'un moins
				return 1;
			}elseif($dateComp < $now){ //Si composant déjà obsolete
				return 0;
			}else{
				return 9;
			}
		}else{ //Si la date est pas renseignée, on dit que c'est pas obsolete
			return -1;
		}
	}
	
	
}
