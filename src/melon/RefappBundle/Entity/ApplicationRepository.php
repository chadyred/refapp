<?php

namespace melon\RefappBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;

use melon\RefappBundle\Form\RechercheAppliType;

use melon\RefappBundle\Form\DomaineType;

use Doctrine\DBAL\Types\ArrayType;

use Symfony\Component\Form\AbstractType;

use Symfony\Component\HttpKernel\DataCollector\DataCollector;

use Doctrine\ORM\EntityRepository;

use melon\RefappBundle\Entity\Domaine;
use melon\RefappBundle\Entity\Composant;

/**
 * ApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplicationRepository extends EntityRepository
{
	

	
	
	
	
	
	
	public function search( $dataNom, 
							$dataCode,
							$dataDomaine, 
							$dataDirection,
							$dataResponsableDsi, 
							$dataServiceAppliDsi, 
							$dataEditeur, 
							$dataTechnologie, 
							$dataCompetence, 
							$dataLangage, 
							$dataLogiciel, 
							$dataSgbd, 
							$dataServeurWeb, 
							$dataOs )
	{

		
		$qb = $this->createQueryBuilder('a');
		
		if ($dataNom != NULL){
			$qb->andWhere("a.nom LIKE :motcle")
			->orderBy('a.nom', 'ASC')
			->setParameter('motcle', '%'.$dataNom.'%');	
		}
		if ($dataCode != NULL){
			$qb->andWhere("a.code LIKE :motcle")->orderBy('a.code', 'ASC')->setParameter('motcle', '%'.$dataCode.'%');
		}
		if ($dataDomaine != NULL){
			$qb->innerJoin('a.domaine', 'do', 'WITH', 'do.nom = :nomDom')->addSelect('do')->setParameter('nomDom', $dataDomaine->getNom());
		}
		if ($dataDirection != NULL){
			$qb->innerJoin('a.directions', 'di', 'WITH', 'di.nom = :nomDir')->addSelect('di')->setParameter('nomDir', $dataDirection->getNom());
		}	
		if ($dataResponsableDsi != NULL){	
			$qb->innerJoin('a.responsablesDsi', 'r', 'WITH', 'r.nom = :nomRes')->addSelect('r')
			->setParameter('nomRes', $dataResponsableDsi->getNom());
		}
		if ($dataServiceAppliDsi != NULL){	
			$qb->innerJoin('a.servicesAppliDsi', 's', 'WITH', 's.nom = :nomSer')->addSelect('s')->setParameter('nomSer', $dataServiceAppliDsi->getNom());
		}
		if ($dataEditeur != NULL){
			$qb->innerJoin('a.editeur', 'e', 'WITH', 'e.nom = :nomEdi')->addSelect('e')->setParameter('nomEdi', $dataEditeur->getNom());
		}
		if ($dataTechnologie != NULL){
			$qb->innerJoin('a.technologies', 't', 'WITH', 't.nom = :nomTech')
			->addSelect('t')->setParameter('nomTech', $dataTechnologie->getNom());
		}	
		if ($dataCompetence != NULL){
			$qb->innerJoin('a.competences', 'compe', 'WITH', 'compe.nom = :nomCompe')
			->addSelect('compe')->setParameter('nomCompe', $dataCompetence->getNom());
		}	
		if ($dataLangage != NULL){	
			$qb->leftJoin('a.composants', 'composant');
			$qb->andWhere('composant.nom = :nomLang')->setParameter('nomLang', $dataLangage->getNom());
		}
		if ($dataLogiciel != NULL){	
			$qb->leftJoin('a.composants', 'composant2');
			$qb->andWhere('composant2.nom = :nomLog')->setParameter('nomLog', $dataLogiciel->getNom());
		}
		if ($dataSgbd != NULL){
			$qb->leftJoin('a.composants', 'composant3');
			$qb->andWhere('composant3.nom = :nomSgbd')->setParameter('nomSgbd', $dataSgbd->getNom());
		}
		if ($dataServeurWeb != NULL){
			$qb->leftJoin('a.composants', 'composant4');
			$qb->andWhere('composant4.nom = :nomServ')->setParameter('nomServ', $dataServeurWeb->getNom());
		}
		if ($dataOs != NULL){
			$qb->leftJoin('a.composants', 'composant5');				
			$qb->andWhere('composant5.nom = :nomOs')->setParameter('nomOs', $dataOs->getNom());
		}
		return $qb->getQuery()->getResult();
	}
	public function searchAppliServeur($serveur){
		$qb = $this->createQueryBuilder('a')
					->innerJoin('a.environnements', 'env')
					->addSelect('env')
					->innerJoin('env.serveurs', 'serv', 'WITH', 'serv=:serv')
					->addSelect('serv')
					->setParameter('serv', $serveur);
		
		return $qb->getQuery()
		->getResult();
		
	}
	
	public function searchApplicationAppli($appli){
		$qb = $this->createQueryBuilder('c')
		->innerJoin('c.applications', 'app', 'WITH', 'app=:app')
		->addSelect('app')
		->setParameter('app', $appli);
	
		return $qb->getQuery()
		->getResult();
	
	}
	
	
	public function getserv(){
		return composants;
		
	}
	
	
}
